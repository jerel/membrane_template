// AUTO GENERATED FILE, DO NOT EDIT
//
// Generated by `membrane`
import 'dart:ffi';
import 'dart:io' show Platform;
import 'package:logging/logging.dart';

import './ffi_bindings.dart' as ffi_bindings;

DynamicLibrary _open() {
  if (Platform.isLinux) {
    Logger('membrane').info('Opening native library librust_example.so');
    return DynamicLibrary.open('librust_example.so');
  }
  if (Platform.isAndroid) {
    Logger('membrane').info('Opening native library librust_example.so');
    return DynamicLibrary.open('librust_example.so');
  }
  if (Platform.isIOS) {
    Logger('membrane').info('Creating dynamic library librust_example');
    return DynamicLibrary.executable();
  }
  if (Platform.isMacOS) {
    Logger('membrane').info('Opening native library librust_example.dylib');
    return DynamicLibrary.open('librust_example.dylib');
  }
  if (Platform.isWindows) {
    Logger('membrane').info('Opening native library librust_example.dll');
    return DynamicLibrary.open('librust_example.dll');
  }
  throw UnsupportedError('This platform is not supported.');
}

typedef _StoreDartPostCobjectC = Void Function(
  Pointer<NativeFunction<Int8 Function(Int64, Pointer<Dart_CObject>)>> ptr,
);
typedef _StoreDartPostCobjectDart = void Function(
  Pointer<NativeFunction<Int8 Function(Int64, Pointer<Dart_CObject>)>> ptr,
);

_load() {
  final dl = _open();
  Logger('membrane').info('Initializing FFI bindings');
  final bindings = ffi_bindings.NativeLibrary(dl);
  final storeDartPostCobject =
      dl.lookupFunction<_StoreDartPostCobjectC, _StoreDartPostCobjectDart>(
    'store_dart_post_cobject',
  );

  Logger('membrane').fine('Initializing Dart_PostCObject');
  storeDartPostCobject(NativeApi.postCObject);

  bindingsLoaded = true;
  return bindings;
}

// Prefer using `bindings` without checking `bindingsLoaded` for most cases.
// This boolean is for special cases where the Dart application needs to
// perform differently until another part of the application needs to load
// the bindings. For example if debug logs are sent to Rust via FFI then you
// may want to log locally in Dart until bindings are loaded and at that time
// begin sending logs over the FFI boundary.
bool bindingsLoaded = false;

final bindings = _load();
