// AUTO GENERATED FILE, DO NOT EDIT
//
// Generated by `membrane`
import 'dart:ffi';
import 'dart:isolate' show ReceivePort;
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:logging/logging.dart';
import 'package:meta/meta.dart';

import './src/loader.dart' as loader;
import './src/bincode/bincode.dart';
import './src/ffi_bindings.dart'
    show MembraneMsgKind, MembraneResponse, MembraneResponseKind;
import './src/time/time.dart';

export './src/time/time.dart' hide TraitHelpers;

final _bindings = loader.bindings;
final _loggingDisabled = bool.fromEnvironment('MEMBRANE_DISABLE_LOGS');

@immutable
class TimeApiError implements Exception {
  final e;
  const TimeApiError(this.e);
}

@immutable
class TimeApi {
  static final _log = Logger('membrane.time');
  const TimeApi();

  Stream<int> currentTime() async* {
    final List<Pointer> _toFree = [];
    final _port = ReceivePort();

    MembraneResponse _taskResult;
    try {
      if (!_loggingDisabled) {
        _log.fine(
            'Calling Rust `currentTime` via C `membrane_time_current_time`');
      }
      _taskResult =
          _bindings.membrane_time_current_time(_port.sendPort.nativePort);
      if (_taskResult.kind == MembraneResponseKind.panic) {
        final ptr = _taskResult.data.cast<Utf8>();
        throw TimeApiError(ptr.toDartString());
      } else if (_taskResult.kind != MembraneResponseKind.data) {
        throw TimeApiError(
            'Found unknown MembraneResponseKind variant, mismatched code versions?');
      }
    } finally {
      _toFree.forEach((ptr) => calloc.free(ptr));
      if (!_loggingDisabled) {
        _log.fine('Freed arguments to `membrane_time_current_time`');
      }
    }

    try {
      yield* _port.map((input) {
        if (!_loggingDisabled) {
          _log.fine('Deserializing data from currentTime');
        }
        final deserializer = BincodeDeserializer(input as Uint8List);
        if (deserializer.deserializeUint8() == MembraneMsgKind.ok) {
          return deserializer.deserializeInt64();
        }
        throw TimeApiError(deserializer.deserializeString());
      });
    } finally {
      if (_taskResult.kind == MembraneResponseKind.data &&
          _bindings.membrane_cancel_membrane_task(_taskResult.data) < 1) {
        throw TimeApiError('Cancellation call to C failed');
      }
    }
  }
}
